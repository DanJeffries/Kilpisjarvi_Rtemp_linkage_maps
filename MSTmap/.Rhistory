cor.test(SNP.stats.Ho.pop,SNP.stats.Hs.pop,method="pearson")
plot(SNP.stats.Ho.pop,SNP.stats.Hs.pop)
abline(lm(SNP.stats.Hs.pop, SNP.stats.Ho.pop), col = "red")
abline(lm(SNP.stats.Hs.pop ~ SNP.stats.Ho.pop), col = "red")
Popnames<-read.table("bats/pop.txt",header=F)
pops<-rep(Popnames[,2])[microsat[,1]]
col<-c("red","blue","orange","orange","orange","orange","green","green","green","green","lightblue","lightblue","lightblue","purple","purple","purple","purple","yellow","yellow")
popcols<-rep(col)[microsat$Pop]
pcamsat<-indpca(microsat,ind.labels=pops)
plot(pcamsat,col=popcols,eigen=T)
pcaSNP<-indpca(SNP,ind.labels=pops)
plot(pcaSNP, col=popcols,eigen=T)
pcaSNP
plot(pcaSNP, col = popcols)
plot(pcaSNP, col = popcols)
dev.off()
plot(pcaSNP, col = popcols)
plot(pcaSNP, col = popcols, main = "Principle component analyses (PC1 & PC2)")
install.packages("ggmap")
library(ggmap)
install.packages("ggplot2")
install.packages("ggplot2")
install.packages("ggplot2")
install.packages("ggplot2")
detach("package:ade4", unload=TRUE)
detach("package:adegenet", unload=TRUE)
library(ggmap)
library(ggplot2)
install.packages("ggplot2")
library(ggplot2)
library(ASMap)
setwd("/home/djeffrie/Data/RADseq/STOECK/B_turanensis_linkage_map/Populations_fam2/")
Femdat <- read.delim("./Female_map/MST_female_map_input.txt", stringsAsFactors = F) ## load input made by MST_input_maker_cline.py
MstFem_1e06 <- mstmap.data.frame(Femdat, pop.type = "DH", dist.fun = "kosambi",  ## this is the function that makes the map. See help for all the options
objective.fun = "COUNT", p.value = 1e-3, noMap.dist = 30, noMap.size = 1,
miss.thresh = 1, mvest.bc = FALSE, detectBadData = TRUE, as.cross = TRUE,
return.imputed = TRUE, trace = FALSE)
Kept_female_1e06 <- LG_sorter(MstFem_1e06, 6) ## note, plots can take a while to appear - they are big
write(names(MstFem$geno$L18$map), file = "./Female_map/Fem_LG18_tag_IDs.txt") ## just change the name of the linkage group
## Dan's LG sorter function -------------------------
### This function is a modification of the ASmap plotting function. It takes an MST object created
### and a threshold number of SNPs provided by the user. Linkage groups are kept and plotted only if
### they contain more SNPs than the threshold number.
LG_sorter <- function(MST_obj,N_snp_thresh)
{
## A couple of cool functions to get odd/even = TRUE/FALSE
is.even <- function(x) x %% 2 == 0
is.odd <- function(x) x %% 2 != 0
for(i in names(MST_obj$imputed.geno))
{
i_int <- is.even(strtoi(strsplit(i, "L")[[1]][2]))
N_snps <- length(names(MST_obj$geno[[i]]$map))
if(N_snps >= N_snp_thresh)
{
if(i_int == T)
{
if(exists("Kept_LGs") == FALSE)
{
Kept_LGs = i
}
else
{
Kept_LGs = c(Kept_LGs, i)
}
}
}
}
print(c("Number of kept linkage groups:",length(Kept_LGs)))
kept_LM <- subset(MST_obj, chr = Kept_LGs)
heatMap(kept_LM, lmax = 50)
rm("Kept_LGs")
return(kept_LM)
}
## FUNCTION TO WRITE MARKER POSITIONS TO A FILE ========================================================
#=======================================================================================================
LG_writer <- function(MST_obj, file_name)
{
df = data.frame()
for (i in names(MST_obj$geno)) {
print(i)
df = rbind(df, data.frame(marker = names(MST_obj$geno[[i]]$map), LG = rep(i, length(MST_obj$geno[[i]]$map)), pos = unname(MST_obj$geno[[i]]$map)))
}
write.table(df, file_name, sep = "\t", quote = FALSE, row.names = FALSE)
}
Kept_female_1e06 <- LG_sorter(MstFem_1e06, 6) ## note, plots can take a while to appear - they are big
Maldat <- read.delim("./Male_map/MST_male_map_input.txt", stringsAsFactors = F)
MstMale <- mstmap(Maldat, pop.type = "DH", dist.fun = "kosambi",
objective.fun = "COUNT", p.value = 1e-03, noMap.dist = 1, noMap.size = 1,
miss.thresh = 1, mvest.bc = FALSE, detectBadData = TRUE, as.cross = TRUE,
return.imputed = TRUE, trace = FALSE)
Kept_male <- LG_sorter(MstMale, 9)
setwd("/home/djeffrie/Data/RADseq/STOECK/B_shaartusiensis_linkage_map/Populations/")
FemdatST18 <- read.delim("./MST_female_map_input.txt", stringsAsFactors = F) ## load input made by MST_input_maker_cline.py
MstFem_ST18_1e06 <- mstmap.data.frame(FemdatST18, pop.type = "DH", dist.fun = "kosambi",
objective.fun = "COUNT", p.value = 1e-3, noMap.dist = 30, noMap.size = 1,
miss.thresh = 1, mvest.bc = FALSE, detectBadData = TRUE, as.cross = TRUE,
return.imputed = TRUE, trace = FALSE)
MstFem_ST18_1e06 <- mstmap.data.frame(FemdatST18, pop.type = "DH", dist.fun = "kosambi",
objective.fun = "COUNT", p.value = 1e-5, noMap.dist = 30, noMap.size = 1,
miss.thresh = 1, mvest.bc = FALSE, detectBadData = TRUE, as.cross = TRUE,
return.imputed = TRUE, trace = FALSE)
MstFem_ST18_1e06 <- mstmap.data.frame(FemdatST18, pop.type = "DH", dist.fun = "kosambi",
objective.fun = "COUNT", p.value = 1e-4, noMap.dist = 30, noMap.size = 1,
miss.thresh = 1, mvest.bc = FALSE, detectBadData = TRUE, as.cross = TRUE,
return.imputed = TRUE, trace = FALSE)
Kept_female_ST18_1e06 <- LG_sorter(MstFem_ST18_1e06, 9) ## see my function at bottom of this script for description
Maldat_ST18 <- read.delim("./MST_male_map_input.txt", stringsAsFactors = F)
MstMale_ST18 <- mstmap(Maldat_ST18, pop.type = "DH", dist.fun = "kosambi",
objective.fun = "COUNT", p.value = 1e-4, noMap.dist = 30, noMap.size = 1,
miss.thresh = 1, mvest.bc = FALSE, detectBadData = TRUE, as.cross = TRUE,
return.imputed = TRUE, trace = FALSE)
MstMale_ST18 <- mstmap(Maldat_ST18, pop.type = "DH", dist.fun = "kosambi",
objective.fun = "COUNT", p.value = 1e-3, noMap.dist = 30, noMap.size = 1,
miss.thresh = 1, mvest.bc = FALSE, detectBadData = TRUE, as.cross = TRUE,
return.imputed = TRUE, trace = FALSE)
MstMale_ST18 <- mstmap(Maldat_ST18, pop.type = "DH", dist.fun = "kosambi",
objective.fun = "COUNT", p.value = 1e-5, noMap.dist = 30, noMap.size = 1,
miss.thresh = 1, mvest.bc = FALSE, detectBadData = TRUE, as.cross = TRUE,
return.imputed = TRUE, trace = FALSE)
Kept_male_ST18 <- LG_sorter(MstMale_ST18, 5)
setwd('/home/djeffrie/Data/RADseq/H_perrinii/Populations_kept_largepops_p12_r0.8_m6/')
body <- read.genepop('./batch_1.gen') ## read in genepop SNP file (outputted by Stacks populations)
body <- read.genepop('./batch_1.gen') ## read in genepop SNP file (outputted by Stacks populations)
grp <- find.clusters (body, max.n.clust = 50)
table.value(table(pop(body), grp$grp), col.lab=paste("inf", 1:11), row.lab=paste("Pop", popNames(body))) ## take a look at the cluster membership table
dapc.test <- dapc(body, n.da=100, n.pca=50, grp$grp)
temp <- optim.a.score(dapc.test)
dapc.test <- dapc(body, n.da=100, n.pca=50, grp$grp)
dapc.test <- dapc(body, n.da=100, n.pca=20, grp$grp)
temp <- optim.a.score(dapc.test)
dapc.real <- dapc(body, grp$grp)
scatter(dapc.real, col = rainbow(10), scree.da=T, posi.da="topleft", bg = "gray90", pch= 20, solid=.6, cex=3)
grp <- find.clusters (body, max.n.clust = 50)
dapc.test <- dapc(body, n.da=100, n.pca=20, grp$grp)
temp <- optim.a.score(dapc.test)
dapc.real <- dapc(body, grp$grp)
scatter(dapc.real, col = rainbow(10), scree.da=T, posi.da="topleft", bg = "gray90", pch= 20, solid=.6, cex=3)
table.value(table(pop(body), grp$grp), col.lab=paste("inf", 1:11), row.lab=paste("Pop", popNames(body))) ## take a look at the cluster membership table
compoplot(dapc.real, col = rainbow(10))
dapc.real
dapc.real$assign
dapc.real$posterior
dapc.real <- dapc(body, grp$grp)
grp <- find.clusters (body, max.n.clust = 50)
dapc.real <- dapc(body, grp$grp)
scatter(dapc.real, col = rainbow(10), scree.da=T, posi.da="topleft", bg = "gray90", pch= 20, solid=.6, cex=3)
grp <- find.clusters (body, max.n.clust = 50)
dapc.test <- dapc(body, n.da=100, n.pca=20, grp$grp)
temp <- optim.a.score(dapc.test)
dapc.real <- dapc(body, grp$grp)
scatter(dapc.real, col = rainbow(10), scree.da=T, posi.da="topleft", bg = "gray90", pch= 20, solid=.6, cex=3)
compoplot(dapc.real, col = rainbow(10))
compoplot(dapc.real, col = c("blue", "green"))
scatter(dapc.real, col = c("blue", "green"), scree.da=T, posi.da="topleft", bg = "gray90", pch= 20, solid=.6, cex=3)
scatter(dapc.real, col = cols, scree.da=T, posi.da="topleft", bg = "gray90", pch= 20, solid=.6, cex=3)
scatter(dapc.real, col = cols, scree.da=T, posi.da="topleft", bg = "white", pch= 20, solid=.6, cex=3)
cols = c("blue", "green")
scatter(dapc.real, col = cols, scree.da=T, posi.da="topleft", bg = "white", pch= 20, solid=.6, cex=3)
coordinates <- as.data.frame(dapc.real$ind.coord)
scatter(dapc.real, col = cols, scree.da=T, posi.da="topleft", bg = F, pch= 20, solid=.6, cex=3)
scatter(dapc.real, col = cols, scree.da=T, posi.da="topleft", bg = F, pch= 20, solid=.6, cex=3)
table.value(table(pop(body), grp$grp), col.lab=paste("inf", 1:11), row.lab=paste("Pop", popNames(body))) ## take a look at the cluster membership table
dapc.test <- dapc(body, n.da=100, n.pca=20, grp$grp)
temp <- optim.a.score(dapc.test)
dapc.real <- dapc(body, grp$grp)
scatter(dapc.real, col = cols, scree.da=T, posi.da="topleft", bg = F, pch= 20, solid=.6, cex=3)
scatter(dapc.real, col = cols, scree.da=T, posi.da="topleft", bg = F, pch= 20, solid=.6, cex=3)
scatter(dapc.real, col = cols, scree.da=T, posi.da="topleft", bg = FALSE, pch= 20, solid=.6, cex=3)
compoplot(dapc.real, col = cols)
grp <- find.clusters (body, max.n.clust = 50)
grp <- find.clusters (body, max.n.clust = 50)
table.value(table(pop(body), grp$grp), col.lab=paste("inf", 1:11), row.lab=paste("Pop", popNames(body))) ## take a look at the cluster membership table
dapc.test <- dapc(body, n.da=100, n.pca=20, grp$grp)
temp <- optim.a.score(dapc.test)
dapc.real <- dapc(body, grp$grp)
scatter(dapc.real, col = cols, scree.da=T, posi.da="topleft", bg = FALSE, pch= 20, solid=.6, cex=3)
cols = c("blue", "green", "green")
scatter(dapc.real, col = cols, scree.da=T, posi.da="topleft", bg = FALSE, pch= 20, solid=.6, cex=3)
coordinates <- as.data.frame(dapc.real$ind.coord)
compoplot(dapc.real, col = cols)
cols = c("blue", "green") #, "green")
compoplot(dapc.real, col = cols)
csv(filename = "./K3_assignment_posteriors.txt",
sep = "\t")
write.csv(filename = "./K3_assignment_posteriors.txt",
sep = "\t")
?write.csv
write.csv(dapc.real$posterior, file = "./K3_assignment_posteriors.txt",
sep = "\t")
write.csv(dapc.real$posterior, file = "./K3_assignment_posteriors.txt",
sep = " ")
write.table(dapc.real$posterior, file = "./K3_assignment_posteriors.txt",
sep = " ")
write.table(dapc.real$posterior, file = "./K3_assignment_posteriors.txt",
sep = "\t")
write.table(dapc.real$posterior, file = "./K3_assignment_posteriors.txt",
sep = "\t", quote = F)
rounded <-round(dapc.real$posterior[,-1],0)
rounded
rounded <-round(dapc.real$posterior[,-1],2)
rounded
rounded <-round(dapc.real$posterior[,-1],3)
rounded
grp <- find.clusters (body, max.n.clust = 50)
dapc.real <- dapc(body, grp$grp)
scatter(dapc.real, col = cols, scree.da=T, posi.da="topleft", bg = FALSE, pch= 20, solid=.6, cex=3)
write.table(dapc.real$posterior, file = "./K2_assignment_posteriors.txt",
sep = "\t", quote = F)
dapc.real
dapc.real$assign
body
indNames(body)
dapc.real
dapc.real$ind.coord
grp <- find.clusters (body, max.n.clust = 50)
dapc.real <- dapc(body, grp$grp)
dapc.real$ind.coord
dapc.real
dapc.real$ind.coord$LD1
dapc.real$ind.coord[LD1]
dapc.real$ind.coord[[LD1]]
dapc.real$ind.coord[0,1]
dapc.real$ind.coord[0,]
dapc.real$ind.coord[,2]
dapc.real$ind.coord[,1]
dapc.real$ind.coord[,3]
dapc.real$ind.coord[,1]
K_assignements = dapc.real$assign
K_assignements
PCA_info = df(sample = indNames(body), K =  K_assignements = dapc.real$assign)
PCA_info = df(sample = indNames(body), K_assignements = dapc.real$assign)
PCA_info = data.frame(sample = indNames(body), K_assignements = dapc.real$assign)
PCA_info
body_noNA <- tab(body, NA.method="mean")
body_noNA
pca1 <- dudi.pca(body,scannf=FALSE,scale=FALSE)
pca1 <- dudi.pca(body_noNA,scannf=FALSE,scale=FALSE)
plot(pca1)
plot(pca1$li)
pca_info = data.frame(sample_ID =
pca1
plot(pca1$li, col = )
pca_info = data.frame(sample_ID =
pca1
plot(pca1$li, col = )
pca1
pca_info = data.frame(sample_ID = indNames(body),
pca1$li
plot(pca1$li, col = )
pca1$li
pca_info = data.frame(sample_ID = indNames(body), PC1 = pca1$li$Axis1, PC2 = pca1$li$Axis2, K = dapc.real$assign)
pca_info
body$pop
strsplit(body$pop, split = "_")
strsplit(body$pop, split = "_", fixed = T)
strsplit(body$pop, "_", fixed = T)
body$pop
body_pop <- as.character(body$pop)
body_pop
strsplit(body$pop, "_", fixed = T)
strsplit(body_pop, "_", fixed = T)
unlist(strsplit(body_pop, "_", fixed = T))
vapply(strsplit(body_pop,"-"), `[`, 2, FUN.VALUE=character(1))
vapply(strsplit(body_pop,"-"), `[`, 2, FUN.VALUE=character(0))
vapply(strsplit(body_pop,"-"), `[`, 1, FUN.VALUE=character(1))
vapply(strsplit(body_pop,"_"), `[`, 1, FUN.VALUE=character(1))
pca_info = data.frame(sample_ID = indNames(body), pop = pops,  PC1 = pca1$li$Axis1, PC2 = pca1$li$Axis2, K = dapc.real$assign)
pops = vapply(strsplit(body_pop,"_"), `[`, 1, FUN.VALUE=character(1))
pca_info = data.frame(sample_ID = indNames(body), pop = pops,  PC1 = pca1$li$Axis1, PC2 = pca1$li$Axis2, K = dapc.real$assign)
pca_info
scatter(pca_info$PC1, pca_info$PC2)
plot(pca_info$PC1, pca_info$PC2)
plot(pca_info$PC1, pca_info$PC2)
plot(pca_info$PC1, pca_info$PC2, col = pca_info$pops)
plot(pca_info$PC1, pca_info$PC2, col = factor(pca_info$pops))
plot(pca_info$PC1, pca_info$PC2), col = factor(pca_info$pops))
plot(pca_info$PC1, pca_info$PC2) #, col = factor(pca_info$pops))
plot(pca_info$PC1, pca_info$PC2, col = factor(pca_info$pops))
plot(pca_info$PC1, pca_info$PC2, col = as.factor(pca_info$pops))
as.factor(pca_info$pops)
factor(pca_info$pops)
pca_info$pops
pca_info
plot(pca_info$PC1, pca_info$PC2, col = factor(pca_info$pop))
plot(pca_info$PC1, pca_info$PC2, col = pca_info$pop)
palette(rainbow(13))
plot(pca_info$PC1, pca_info$PC2, col = pca_info$pop)
palette(rainbow(14))
plot(pca_info$PC1, pca_info$PC2, col = pca_info$pop)
palette(rainbow(20))
plot(pca_info$PC1, pca_info$PC2, col = pca_info$pop)
palette(rainbow(25))
plot(pca_info$PC1, pca_info$PC2, col = pca_info$pop)
palette(rainbow(15))
plot(pca_info$PC1, pca_info$PC2, col = pca_info$pop)
plot(pca_info$PC1, pca_info$PC2, col = pca_info$pop, pch = factor(pca_info$K))
plot(pca_info$PC1, pca_info$PC2, col = pca_info$pop, pch = pca_info$K)
plot(pca_info$PC1, pca_info$PC2, col = pca_info$pop, pch = character(pca_info$K))
plot(pca_info$PC1, pca_info$PC2, col = pca_info$pop, pch = as.character(pca_info$K))
plot(pca_info$PC1, pca_info$PC2, col = pca_info$pop, pch = as.character(pca_info$pop))
textxy(pca_info$PC1, pca_info$PC2, col = pca_info$pop, pch = as.character(pca_info$pop))
text(pca_info$PC1, pca_info$PC2, col = pca_info$pop, pch = as.character(pca_info$pop))
plot(pca_info$PC1, pca_info$PC2, col = pca_info$pop, pch = as.character(pca_info$pop))
plot(pca_info$PC1, pca_info$PC2, col = pca_info$K, pch = as.character(pca_info$pop))
palette(rainbow(3))
plot(pca_info$PC1, pca_info$PC2, col = pca_info$K, pch = as.character(pca_info$pop))
library(ASMap)
setwd("/home/djeffrie/Data/RADseq/Kilpisjarvi_maps")
Femdat <- read.delim("./Female_map/MST_female_map_input.txt", stringsAsFactors = F) ## load input made by MST_input_maker_cline.py
setwd("/home/djeffrie/Data/RADseq/Kilpisjarvi_maps/MSTmap")
Femdat <- read.delim("./Female_map/MST_female_map_input.txt", stringsAsFactors = F) ## load input made by MST_input_maker_cline.py
MstFem_1e06 <- mstmap.data.frame(Femdat, pop.type = "DH", dist.fun = "kosambi",  ## this is the function that makes the map. See help for all the options
objective.fun = "COUNT", p.value = 1e-6, noMap.dist = 30, noMap.size = 1,
miss.thresh = 1, mvest.bc = FALSE, detectBadData = TRUE, as.cross = TRUE,
return.imputed = TRUE, trace = FALSE)
MstFem_1e06 <- mstmap.data.frame(Femdat, pop.type = "DH", dist.fun = "kosambi",  ## this is the function that makes the map. See help for all the options
objective.fun = "COUNT", p.value = 1e-5, noMap.dist = 30, noMap.size = 1,
miss.thresh = 1, mvest.bc = FALSE, detectBadData = TRUE, as.cross = TRUE,
return.imputed = TRUE, trace = FALSE)
MstFem_1e06 <- mstmap.data.frame(Femdat, pop.type = "DH", dist.fun = "kosambi",  ## this is the function that makes the map. See help for all the options
objective.fun = "COUNT", p.value = 1e-4, noMap.dist = 30, noMap.size = 1,
miss.thresh = 1, mvest.bc = FALSE, detectBadData = TRUE, as.cross = TRUE,
return.imputed = TRUE, trace = FALSE)
MstFem_1e06 <- mstmap.data.frame(Femdat, pop.type = "DH", dist.fun = "kosambi",  ## this is the function that makes the map. See help for all the options
objective.fun = "COUNT", p.value = 1e-3, noMap.dist = 30, noMap.size = 1,
miss.thresh = 1, mvest.bc = FALSE, detectBadData = TRUE, as.cross = TRUE,
return.imputed = TRUE, trace = FALSE)
MstFem_1e06 <- mstmap.data.frame(Femdat, pop.type = "DH", dist.fun = "kosambi",  ## this is the function that makes the map. See help for all the options
objective.fun = "COUNT", p.value = 1e-35, noMap.dist = 30, noMap.size = 1,
miss.thresh = 1, mvest.bc = FALSE, detectBadData = TRUE, as.cross = TRUE,
return.imputed = TRUE, trace = FALSE)
MstFem_1e06 <- mstmap.data.frame(Femdat, pop.type = "DH", dist.fun = "kosambi",  ## this is the function that makes the map. See help for all the options
objective.fun = "COUNT", p.value = 5e-3, noMap.dist = 30, noMap.size = 1,
miss.thresh = 1, mvest.bc = FALSE, detectBadData = TRUE, as.cross = TRUE,
return.imputed = TRUE, trace = FALSE)
MstFem_1e06 <- mstmap.data.frame(Femdat, pop.type = "DH", dist.fun = "kosambi",  ## this is the function that makes the map. See help for all the options
objective.fun = "COUNT", p.value = 5e-4, noMap.dist = 30, noMap.size = 1,
miss.thresh = 1, mvest.bc = FALSE, detectBadData = TRUE, as.cross = TRUE,
return.imputed = TRUE, trace = FALSE)
MstFem_1e06 <- mstmap.data.frame(Femdat, pop.type = "DH", dist.fun = "kosambi",  ## this is the function that makes the map. See help for all the options
objective.fun = "COUNT", p.value = 8e-4, noMap.dist = 30, noMap.size = 1,
miss.thresh = 1, mvest.bc = FALSE, detectBadData = TRUE, as.cross = TRUE,
return.imputed = TRUE, trace = FALSE)
MstFem_1e06 <- mstmap.data.frame(Femdat, pop.type = "DH", dist.fun = "kosambi",  ## this is the function that makes the map. See help for all the options
objective.fun = "COUNT", p.value = 2e-4, noMap.dist = 30, noMap.size = 1,
miss.thresh = 1, mvest.bc = FALSE, detectBadData = TRUE, as.cross = TRUE,
return.imputed = TRUE, trace = FALSE)
MstFem_1e06 <- mstmap.data.frame(Femdat, pop.type = "DH", dist.fun = "kosambi",  ## this is the function that makes the map. See help for all the options
objective.fun = "COUNT", p.value = 3e-4, noMap.dist = 30, noMap.size = 1,
miss.thresh = 1, mvest.bc = FALSE, detectBadData = TRUE, as.cross = TRUE,
return.imputed = TRUE, trace = FALSE)
MstFem_1e06 <- mstmap.data.frame(Femdat, pop.type = "DH", dist.fun = "kosambi",  ## this is the function that makes the map. See help for all the options
objective.fun = "COUNT", p.value = 4e-4, noMap.dist = 30, noMap.size = 1,
miss.thresh = 1, mvest.bc = FALSE, detectBadData = TRUE, as.cross = TRUE,
return.imputed = TRUE, trace = FALSE)
MstFem_1e06 <- mstmap.data.frame(Femdat, pop.type = "DH", dist.fun = "kosambi",  ## this is the function that makes the map. See help for all the options
objective.fun = "COUNT", p.value = 4.5e-4, noMap.dist = 30, noMap.size = 1,
miss.thresh = 1, mvest.bc = FALSE, detectBadData = TRUE, as.cross = TRUE,
return.imputed = TRUE, trace = FALSE)
MstFem_1e06 <- mstmap.data.frame(Femdat, pop.type = "DH", dist.fun = "kosambi",  ## this is the function that makes the map. See help for all the options
objective.fun = "COUNT", p.value = 5e-4, noMap.dist = 30, noMap.size = 1,
miss.thresh = 1, mvest.bc = FALSE, detectBadData = TRUE, as.cross = TRUE,
return.imputed = TRUE, trace = FALSE)
MstFem_1e06 <- mstmap.data.frame(Femdat, pop.type = "DH", dist.fun = "kosambi",  ## this is the function that makes the map. See help for all the options
objective.fun = "COUNT", p.value = 4.7e-4, noMap.dist = 30, noMap.size = 1,
miss.thresh = 1, mvest.bc = FALSE, detectBadData = TRUE, as.cross = TRUE,
return.imputed = TRUE, trace = FALSE)
MstFem_1e06 <- mstmap.data.frame(Femdat, pop.type = "DH", dist.fun = "haldane",  ## this is the function that makes the map. See help for all the options
objective.fun = "COUNT", p.value = 4.7e-4, noMap.dist = 30, noMap.size = 1,
miss.thresh = 1, mvest.bc = FALSE, detectBadData = TRUE, as.cross = TRUE,
return.imputed = TRUE, trace = FALSE)
MstFem_1e06 <- mstmap.data.frame(Femdat, pop.type = "DH", dist.fun = "kosambi",  ## this is the function that makes the map. See help for all the options
objective.fun = "COUNT", p.value = 4.7e-4, noMap.dist = 10, noMap.size = 1,
miss.thresh = 1, mvest.bc = FALSE, detectBadData = TRUE, as.cross = TRUE,
return.imputed = TRUE, trace = FALSE)
MstFem_1e06 <- mstmap.data.frame(Femdat, pop.type = "DH", dist.fun = "kosambi",  ## this is the function that makes the map. See help for all the options
objective.fun = "COUNT", p.value = 4.7e-4, noMap.dist = 5, noMap.size = 1,
miss.thresh = 1, mvest.bc = FALSE, detectBadData = TRUE, as.cross = TRUE,
return.imputed = TRUE, trace = FALSE)
MstFem_1e06 <- mstmap.data.frame(Femdat, pop.type = "DH", dist.fun = "kosambi",  ## this is the function that makes the map. See help for all the options
objective.fun = "COUNT", p.value = 4.7e-4, noMap.dist = 40, noMap.size = 1,
miss.thresh = 1, mvest.bc = FALSE, detectBadData = TRUE, as.cross = TRUE,
return.imputed = TRUE, trace = FALSE)
MstFem_1e06 <- mstmap.data.frame(Femdat, pop.type = "DH", dist.fun = "kosambi",  ## this is the function that makes the map. See help for all the options
objective.fun = "COUNT", p.value = 4.7e-4, noMap.dist = 40, noMap.size = 5,
miss.thresh = 1, mvest.bc = FALSE, detectBadData = TRUE, as.cross = TRUE,
return.imputed = TRUE, trace = FALSE)
MstFem_1e06 <- mstmap.data.frame(Femdat, pop.type = "DH", dist.fun = "kosambi",  ## this is the function that makes the map. See help for all the options
objective.fun = "COUNT", p.value = 4.7e-4, noMap.dist = 40, noMap.size = 5,
miss.thresh = 1, mvest.bc = TRUE, detectBadData = TRUE, as.cross = TRUE,
return.imputed = TRUE, trace = FALSE)
MstFem_1e06 <- mstmap.data.frame(Femdat, pop.type = "DH", dist.fun = "kosambi",  ## this is the function that makes the map. See help for all the options
objective.fun = "COUNT", p.value = 1e-3, noMap.dist = 40, noMap.size = 5,
miss.thresh = 1, mvest.bc = TRUE, detectBadData = TRUE, as.cross = TRUE,
return.imputed = TRUE, trace = FALSE)
MstFem_1e06 <- mstmap.data.frame(Femdat, pop.type = "DH", dist.fun = "kosambi",  ## this is the function that makes the map. See help for all the options
objective.fun = "COUNT", p.value = 1e-2, noMap.dist = 40, noMap.size = 5,
miss.thresh = 1, mvest.bc = TRUE, detectBadData = TRUE, as.cross = TRUE,
return.imputed = TRUE, trace = FALSE)
MstFem_1e06 <- mstmap.data.frame(Femdat, pop.type = "DH", dist.fun = "kosambi",  ## this is the function that makes the map. See help for all the options
objective.fun = "COUNT", p.value = 5e-2, noMap.dist = 40, noMap.size = 5,
miss.thresh = 1, mvest.bc = TRUE, detectBadData = TRUE, as.cross = TRUE,
return.imputed = TRUE, trace = FALSE)
MstFem_1e06 <- mstmap.data.frame(Femdat, pop.type = "DH", dist.fun = "kosambi",  ## this is the function that makes the map. See help for all the options
objective.fun = "COUNT", p.value = 5e-3, noMap.dist = 40, noMap.size = 5,
miss.thresh = 1, mvest.bc = TRUE, detectBadData = TRUE, as.cross = TRUE,
return.imputed = TRUE, trace = FALSE)
MstFem_1e06 <- mstmap.data.frame(Femdat, pop.type = "DH", dist.fun = "kosambi",  ## this is the function that makes the map. See help for all the options
objective.fun = "COUNT", p.value = 1e-4, noMap.dist = 40, noMap.size = 5,
miss.thresh = 1, mvest.bc = TRUE, detectBadData = TRUE, as.cross = TRUE,
return.imputed = TRUE, trace = FALSE)
MstFem_1e06 <- mstmap.data.frame(Femdat, pop.type = "DH", dist.fun = "kosambi",  ## this is the function that makes the map. See help for all the options
objective.fun = "COUNT", p.value = 9e-3, noMap.dist = 40, noMap.size = 5,
miss.thresh = 1, mvest.bc = TRUE, detectBadData = TRUE, as.cross = TRUE,
return.imputed = TRUE, trace = FALSE)
MstFem_1e06 <- mstmap.data.frame(Femdat, pop.type = "DH", dist.fun = "kosambi",  ## this is the function that makes the map. See help for all the options
objective.fun = "COUNT", p.value = 4.7e-4, noMap.dist = 40, noMap.size = 5,
miss.thresh = 1, mvest.bc = FALSE, detectBadData = TRUE, as.cross = TRUE,
return.imputed = TRUE, trace = FALSE)
MstFem_1e06 <- mstmap.data.frame(Femdat, pop.type = "DH", dist.fun = "kosambi",  ## this is the function that makes the map. See help for all the options
objective.fun = "COUNT", p.value = 1e-5, noMap.dist = 40, noMap.size = 5,
miss.thresh = 1, mvest.bc = FALSE, detectBadData = TRUE, as.cross = TRUE,
return.imputed = TRUE, trace = FALSE)
MstFem_1e06 <- mstmap.data.frame(Femdat, pop.type = "DH", dist.fun = "kosambi",  ## this is the function that makes the map. See help for all the options
objective.fun = "COUNT", p.value = 1e-4, noMap.dist = 40, noMap.size = 5,
miss.thresh = 1, mvest.bc = FALSE, detectBadData = TRUE, as.cross = TRUE,
return.imputed = TRUE, trace = FALSE)
MstFem_1e06 <- mstmap.data.frame(Femdat, pop.type = "DH", dist.fun = "kosambi",  ## this is the function that makes the map. See help for all the options
objective.fun = "COUNT", p.value = 3e-4, noMap.dist = 40, noMap.size = 5,
miss.thresh = 1, mvest.bc = FALSE, detectBadData = TRUE, as.cross = TRUE,
return.imputed = TRUE, trace = FALSE)
MstFem_1e06 <- mstmap.data.frame(Femdat, pop.type = "DH", dist.fun = "kosambi",  ## this is the function that makes the map. See help for all the options
objective.fun = "COUNT", p.value = 3.5e-4, noMap.dist = 40, noMap.size = 5,
miss.thresh = 1, mvest.bc = FALSE, detectBadData = TRUE, as.cross = TRUE,
return.imputed = TRUE, trace = FALSE)
MstFem_1e06 <- mstmap.data.frame(Femdat, pop.type = "DH", dist.fun = "kosambi",  ## this is the function that makes the map. See help for all the options
objective.fun = "COUNT", p.value = 4e-4, noMap.dist = 20, noMap.size = 5,
miss.thresh = 1, mvest.bc = FALSE, detectBadData = TRUE, as.cross = TRUE,
return.imputed = TRUE, trace = FALSE)
MstFem_1e06 <- mstmap.data.frame(Femdat, pop.type = "DH", dist.fun = "kosambi",  ## this is the function that makes the map. See help for all the options
objective.fun = "COUNT", p.value = 4e-4, noMap.dist = 10, noMap.size = 5,
miss.thresh = 1, mvest.bc = FALSE, detectBadData = TRUE, as.cross = TRUE,
return.imputed = TRUE, trace = FALSE)
MstFem_1e06 <- mstmap.data.frame(Femdat, pop.type = "DH", dist.fun = "kosambi",  ## this is the function that makes the map. See help for all the options
objective.fun = "COUNT", p.value = 3e-4, noMap.dist = 10, noMap.size = 5,
miss.thresh = 1, mvest.bc = FALSE, detectBadData = TRUE, as.cross = TRUE,
return.imputed = TRUE, trace = FALSE)
MstFem_1e06 <- mstmap.data.frame(Femdat, pop.type = "DH", dist.fun = "kosambi",  ## this is the function that makes the map. See help for all the options
objective.fun = "COUNT", p.value = 2e-4, noMap.dist = 10, noMap.size = 5,
miss.thresh = 1, mvest.bc = FALSE, detectBadData = TRUE, as.cross = TRUE,
return.imputed = TRUE, trace = FALSE)
MstFem_1e06 <- mstmap.data.frame(Femdat, pop.type = "DH", dist.fun = "kosambi",  ## this is the function that makes the map. See help for all the options
objective.fun = "ML", p.value = 2e-4, noMap.dist = 10, noMap.size = 5,
miss.thresh = 1, mvest.bc = FALSE, detectBadData = TRUE, as.cross = TRUE,
return.imputed = TRUE, trace = FALSE)
Maldat <- read.delim("./Male_map/MST_male_map_input.txt", stringsAsFactors = F)
MstMale <- mstmap(Maldat, pop.type = "DH", dist.fun = "kosambi",
objective.fun = "COUNT", p.value = 1e-06, noMap.dist = 30, noMap.size = 1,
miss.thresh = 1, mvest.bc = FALSE, detectBadData = TRUE, as.cross = TRUE,
return.imputed = TRUE, trace = FALSE)
MstMale <- mstmap(Maldat, pop.type = "DH", dist.fun = "kosambi",
objective.fun = "COUNT", p.value = 1e-065, noMap.dist = 30, noMap.size = 1,
miss.thresh = 1, mvest.bc = FALSE, detectBadData = TRUE, as.cross = TRUE,
return.imputed = TRUE, trace = FALSE)
MstMale <- mstmap(Maldat, pop.type = "DH", dist.fun = "kosambi",
objective.fun = "COUNT", p.value = 1e-05, noMap.dist = 30, noMap.size = 1,
miss.thresh = 1, mvest.bc = FALSE, detectBadData = TRUE, as.cross = TRUE,
return.imputed = TRUE, trace = FALSE)
MstMale <- mstmap(Maldat, pop.type = "DH", dist.fun = "kosambi",
objective.fun = "COUNT", p.value = 1e-07, noMap.dist = 30, noMap.size = 1,
miss.thresh = 1, mvest.bc = FALSE, detectBadData = TRUE, as.cross = TRUE,
return.imputed = TRUE, trace = FALSE)
MstMale <- mstmap(Maldat, pop.type = "DH", dist.fun = "kosambi",
objective.fun = "COUNT", p.value = 1e-08, noMap.dist = 30, noMap.size = 1,
miss.thresh = 1, mvest.bc = FALSE, detectBadData = TRUE, as.cross = TRUE,
return.imputed = TRUE, trace = FALSE)
MstMale <- mstmap(Maldat, pop.type = "DH", dist.fun = "kosambi",
objective.fun = "COUNT", p.value = 1e-4, noMap.dist = 30, noMap.size = 1,
miss.thresh = 1, mvest.bc = FALSE, detectBadData = TRUE, as.cross = TRUE,
return.imputed = TRUE, trace = FALSE)
LG_sorter <- function(MST_obj,N_snp_thresh)
{
## A couple of cool functions to get odd/even = TRUE/FALSE
is.even <- function(x) x %% 2 == 0
is.odd <- function(x) x %% 2 != 0
for(i in names(MST_obj$imputed.geno))
{
i_int <- is.even(strtoi(strsplit(i, "L")[[1]][2]))
N_snps <- length(names(MST_obj$geno[[i]]$map))
if(N_snps >= N_snp_thresh)
{
if(i_int == T)
{
if(exists("Kept_LGs") == FALSE)
{
Kept_LGs = i
}
else
{
Kept_LGs = c(Kept_LGs, i)
}
}
}
}
print(c("Number of kept linkage groups:",length(Kept_LGs)))
kept_LM <- subset(MST_obj, chr = Kept_LGs)
heatMap(kept_LM, lmax = 50)
rm("Kept_LGs")
return(kept_LM)
}
Kept_male <- LG_sorter(MstMale, 25)
Kept_female_1e06 <- LG_sorter(MstFem_1e06, 20) ## note, plots can take a while to appear - they are big
